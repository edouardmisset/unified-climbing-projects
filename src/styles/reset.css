/** Kevin Powell's reset CSS
 * https://github.com/kevin-powell/website-starter-template-v3/
 *
 * Remove all animations, transitions and smooth scroll for people that prefer not to see them:
 * https://github.com/kevin-powell/demo-starter-template-with-sass/blob/main/src/sass/base/_reset.scss
 *
 * 25 lines of CSS is all you need (to start with, anyway):
 * https://www.youtube.com/shorts/ydGti7sLVOc
 *
 * Under the radar CSS features for your CSS reset:
 * https://www.youtube.com/watch?v=cCAtD_BAHNw
 *
 * A better image reset for your CSS:
 * https://www.youtube.com/watch?v=345V2MU3E_w
 *
 * Building out a furniture site from Dribbble by Andy Bell:
 * https://piccalil.li/blog/reality-check-1-building-out-a-furniture-site-from-dribbble
 * &
 * https://piccalil.li/blog/a-more-modern-css-reset/
 *
 * Josh Comeau
 * https://www.joshwcomeau.com/css/custom-css-reset/
 *
 * Animation and transitions' timing function values inspired by the
 * "exponential smoothing" from lisyarus'
 * [blog](https://lisyarus.github.io/blog/posts/exponential-smoothing.html)
 */

:where(*) {
  padding: 0;
  margin: 0;
}

:root {
  font-weight: var(--font-weight-4);
  font-family: system-ui, sans-serif;

  --accent: light-dark(var(--violet-6), var(--violet-4));
  --link: light-dark(var(--indigo-7), var(--indigo-5));
  --link-visited: light-dark(var(--indigo-5), var(--indigo-3));
  --text-1: light-dark(var(--gray-12), var(--gray-1));
  --text-2: light-dark(var(--gray-7), var(--gray-4));
  --surface-1: light-dark(var(--gray-0), var(--gray-9));
  --surface-2: light-dark(var(--gray-2), var(--gray-8));
  --surface-3: light-dark(var(--gray-3), var(--gray-7));
  --surface-4: light-dark(var(--gray-4), var(--gray-6));

  /* Accent colors */
  accent-color: var(--accent, var(--link));
  caret-color: var(--accent, var(--link));

  /* By default we enable dark mode */
  color-scheme: light dark;
  background-color: var(--surface-1);
  color: var(--text-1);
  font-synthesis: none;
  text-rendering: optimizelegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-size-adjust: 100%;
  animation-timing-function: cubic-bezier(0, 0.3, 0.1, 1);
  transition-timing-function: cubic-bezier(0, 0.3, 0.1, 1);

  interpolate-size: allow-keywords;
}

::selection {
  color: var(--surface-1);
  background-color: var(--text-1);
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

:where(html) {
  hanging-punctuation: first last;
  scrollbar-color: light-dark(var(--gray-7), var(--gray-6)) transparent;

  &[data-color-scheme='light'] {
    color-scheme: light;
  }

  &[data-color-scheme='dark'] {
    color-scheme: dark;
  }
}

:where(html:focus-within) {
  scroll-behavior: smooth;
}

:where(body) {
  min-block-size: 100svh;
  font-size: 1.125rem;
  line-height: 1.5;
}

:where(h1, h2, h3, h4, h5, h6) {
  font-weight: var(--font-weight-7);
  line-height: var(--font-lineheight-1);
  text-wrap: balance;
}

:where(p, h1, h2, h3, h4, h5, h6) {
  overflow-wrap: break-word;
}

:where(p) {
  max-inline-size: 65ch;
  text-wrap: pretty;
}

:where(img, svg, picture) {
  display: block;
  max-inline-size: 100%;
  block-size: auto;
  font-style: italic;
}

:where(a) {
  font-weight: var(--font-weight-5);
  color: var(--violet-9);
  text-underline-offset: 0.2em;
}

:where(a:hover) {
  color: var(--violet-7);
}

:where(a:visited) {
  color: var(--violet-7);
}

/* A elements that don't have a class get default styles */
:where(a:not([class])) {
  text-decoration-skip-ink: auto;
  text-decoration-thickness: max(0.08em, 1px);
  color: currentcolor;
}

/* Progressive enhancements */
@supports (field-sizing: content) {
  :where(textarea, select, input) {
    field-sizing: content;
  }
}

:where(b, strong) {
  font-weight: var(--font-weight-9);
}

/* Remove all animations, transitions and smooth scroll for people that prefer
not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    transition-duration: 0.01ms !important;
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    scroll-behavior: auto !important;
  }
}

@media (prefers-reduced-motion: no-preference) {
  :has(:target) {
    scroll-behavior: smooth;
    scroll-padding-inline-start: 3rem;
  }
}

/**
 * This is from the normalize css file from open props:
 *
 */

:where(html) :where(dialog) {
  background-color: var(--surface-1);
}

:where(html) :where(button, .btn) {
  --_highlight: var(--_highlight-light);
  --_bg: var(--_bg-light);
  --_ink-shadow: var(--_ink-shadow-light);
}

:where(a[href]) {
  color: var(--link);
}

:where(a[href]):where(:visited) {
  color: var(--link-visited);
}

:focus-visible {
  outline-color: var(--accent);
}

:where(:not(dialog)) {
  margin: 0;
}

:where(:not(fieldset, progress, meter)) {
  background-repeat: no-repeat;
  background-origin: border-box;
  border-style: solid;
  border-width: 0;
}

@media (prefers-reduced-motion: no-preference) {
  :where(html) {
    scroll-behavior: smooth;
  }
}

@media (prefers-reduced-motion: no-preference) {
  :where(:focus-visible) {
    transition: outline-offset 145ms var(--ease-2);
  }

  :where(:not(:active):focus-visible) {
    transition-duration: 0.25s;
  }
}

:where(:not(:active):focus-visible) {
  outline-offset: 5px;
}

:where(h1) {
  font-size: var(--font-size-8);
}

:where(h2) {
  font-size: var(--font-size-6);
}

:where(h3) {
  font-size: var(--font-size-5);
}

:where(h4) {
  font-size: var(--font-size-4);
}

:where(h5) {
  font-size: var(--font-size-3);
}

:where(h3, h4, h5, h6, dt) {
  max-inline-size: var(--size-header-3);
}

:where(p, ul, ol, dl, h6) {
  font-size: var(--font-size-2);
}

@supports (-moz-appearance: none) {
  :where(a, u, ins, abbr) {
    text-underline-offset: 2px;
  }
}

:where(
    a[href],
    area,
    button,
    input:not(
        [type='text'],
        [type='email'],
        [type='number'],
        [type='password'],
        [type=''],
        [type='tel'],
        [type='url']
      ),
    label[for],
    select,
    summary,
    [tabindex]:not([tabindex*='-'])
  ) {
  cursor: pointer;
}

:where(
    a[href],
    area,
    button,
    input,
    label[for],
    select,
    summary,
    textarea,
    [tabindex]:not([tabindex*='-'])
  ) {
  -webkit-tap-highlight-color: transparent;
  touch-action: manipulation;
}

:where(a):where([href]) {
  text-decoration-color: var(--link-color);
}

:where(a):where([href]):where(:visited) {
  text-decoration-color: var(--link-visited);
}

:where(a):where(:not(:hover)) {
  text-decoration: inherit;
}

:where(img, svg, video, canvas, audio, iframe, embed, object) {
  display: block;
}

:where(img, svg, video) {
  max-inline-size: 100%;
  block-size: auto;
}

/* Reset styles for form elements */

:where(input, button, textarea, select),
:where(input[type='file'])::-webkit-file-upload-button {
  font: inherit;
  font-size: inherit;
  color: inherit;
  letter-spacing: inherit;
}

:where(html)
  :where(
    textarea,
    select,
    input:not([type='button'], [type='submit'], [type='reset'])
  ) {
  background-color: var(--surface-2);
}

:where(form input:user-invalid, form textarea:user-invalid) {
  outline: var(--red-8) solid var(--border-size-2);
  outline-offset: 1px;
}

:where(form input:user-valid, form textarea:user-valid) {
  outline: var(--green-8) solid var(--border-size-1);
  outline-offset: 1px;
}

:where(
    label:has(+ input:required),
    label:has(+ textarea:required),
    label:has(+ select:required),
    .required
  )::after {
  font-size: 1em;
  vertical-align: super;
  color: var(--red-9);
  content: ' *';
}

:where(::placeholder) {
  color: white;
  text-shadow:
    0 0 0.05em black,
    0 0 0.05em black,
    0 0 0.05em black,
    0 0 0.05em black;
  opacity: 0.8;

  @supports (color: oklch(from lightblue l c h)) {
    --l: clamp(0, (var(--l-threshold, 0.623) / l - 1) * infinity, 1);

    color: oklch(from var(--color) var(--l) 0 h);
    text-shadow: none;
  }
}

:where(input:not([type='range']), textarea) {
  padding-block: var(--size-1);
  padding-inline: var(--size-2);
}

:where(select) {
  padding-block: var(--size-1);
  padding-inline-start: var(--size-relative-4);
}

:where(
    textarea,
    select,
    input:not([type='button'], [type='submit'], [type='reset'])
  ) {
  background-color: var(--surface-2);
  border-radius: var(--radius-2);
}

:where(textarea) {
  resize: block;
}

:where(input[type='checkbox'], input[type='radio']) {
  inline-size: var(--size-3);
  block-size: var(--size-3);
}

:where(svg:not([width])) {
  inline-size: var(--size-10);
}

:where(code, kbd, samp, pre) {
  font-family: var(--font-mono);
}

:where(:not(pre) > code, kbd) {
  white-space: nowrap;
}

:where(pre) {
  direction: ltr;
  max-inline-size: max-content;
  min-inline-size: 0;
  white-space: pre;
  writing-mode: lr;
}

:where(:not(pre) > code) {
  padding: var(--size-1) var(--size-2);
  background: var(--surface-2);
  border-radius: var(--radius-2);
  writing-mode: lr;
}

:where(kbd, var) {
  padding: var(--size-1) var(--size-2);
  border-color: var(--surface-4);
  border-width: var(--border-size-1);
  border-radius: var(--radius-2);
}

:where(mark) {
  padding-inline: var(--size-1);
  border-radius: var(--radius-2);
}

:where(ol, ul) {
  padding-inline-start: var(--size-8);
}

:where(li) {
  padding-inline-start: var(--size-2);
}

:where(li, dd, figcaption) {
  max-inline-size: var(--size-content-2);
}

:where(dt, summary) {
  font-weight: var(--font-weight-7);
}

:where(dt:not(:first-of-type)) {
  margin-block-start: var(--size-5);
}

:where(small) {
  max-inline-size: var(--size-content-1);
  font-size: max(0.5em, var(--font-size-0));
}

:where(hr) {
  height: var(--border-size-2);
  margin-block: var(--size-fluid-5);
  background-color: var(--surface-3);
}

:where(i, em) {
  font-family: var(--font-handwritten);
  font-style: italic;
  font-weight: var(--font-weight-6);
}

:where(figure) {
  display: grid;
  gap: var(--size-2);
  place-items: center;
}

:where(figure) > :where(figcaption) {
  font-size: var(--font-size-1);
  text-wrap: balance;
}

:where(blockquote, :not(blockquote) > cite) {
  border-inline-start-width: var(--border-size-3);
}

:where(blockquote) {
  display: grid;
  gap: var(--size-3);
  max-inline-size: var(--size-content-2);
  padding-block: var(--size-3);
  padding-inline: var(--size-4);
}

:where(:not(blockquote) > cite) {
  padding-inline-start: var(--size-2);
}

:where(summary) {
  padding: var(--size-2) var(--size-3);
  margin: calc(var(--size-2) * -1) calc(var(--size-3) * -1);
  background: var(--surface-3);
  border-radius: var(--radius-2);
}

:where(details) {
  padding-block: var(--size-2);
  padding-inline: var(--size-3);
  background: var(--surface-2);
  border-radius: var(--radius-2);
}

:where(details[open] > summary) {
  margin-bottom: var(--size-2);
  border-end-start-radius: 0;
  border-end-end-radius: 0;
}

:where(fieldset) {
  border: var(--border-size-1) solid var(--surface-4);
  border-radius: var(--radius-2);
}

:where(del) {
  color: var(--red-2);
  background: var(--red-9);
}

:where(ins) {
  color: var(--green-1);
  background: var(--green-9);
}

:where(abbr) {
  text-decoration-color: var(--blue-5);
}

:where(dialog) {
  color: inherit;
  background-color: var(--surface-1);
  border-radius: var(--radius-3);
  box-shadow: var(--shadow-6);
}

:where(dialog)::backdrop {
  backdrop-filter: blur(25px);
}

:where(html:has(dialog[open])) {
  overflow: hidden;
}

:where(menu) {
  display: flex;
  gap: var(--size-3);
  padding-inline-start: 0;
}

:where(sup) {
  font-size: 0.5em;
}

:where(table) {
  --nice-inner-radius: calc(var(--radius-3) - 2px);
  width: fit-content;

  background: var(--surface-2);
  border: 1px solid var(--surface-2);
  border-radius: var(--radius-3);
}

:where(table[\:not-has\(tfoot\)] tr:last-child td:first-child) {
  border-end-start-radius: var(--nice-inner-radius);
}

:where(table:not(:has(tfoot)) tr:last-child td:first-child) {
  border-end-start-radius: var(--nice-inner-radius);
}

:where(table[\:not-has\(tfoot\)] tr:last-child td:last-child) {
  border-end-end-radius: var(--nice-inner-radius);
}

:where(table:not(:has(tfoot)) tr:last-child td:last-child) {
  border-end-end-radius: var(--nice-inner-radius);
}

:where(table thead tr:first-child th:first-child) {
  border-start-start-radius: var(--nice-inner-radius);
}

:where(table thead tr:first-child th:last-child) {
  border-start-end-radius: var(--nice-inner-radius);
}

:where(tfoot tr:last-child :is(th, td):first-of-type) {
  border-end-start-radius: var(--nice-inner-radius);
}

:where(tfoot tr:last-child :is(th, td):last-of-type) {
  border-end-end-radius: var(--nice-inner-radius);
}

:where(th) {
  color: var(--text-1);
  background-color: var(--surface-2);
}

:where(table :is(a, button, [contenteditable]):is(:focus-visible)) {
  outline-offset: -2px;
}

:where(td) {
  max-inline-size: var(--size-content-2);
  text-wrap: pretty;
}

:where(td, th) {
  padding: var(--size-fluid-0);
  text-align: left;
}

:where(:is(td, th):not([align])) {
  text-align: center;
}

:where(thead) {
  border-collapse: collapse;
}

:where(table tr:not(thead tr, tfoot tr):hover td),
:where(tbody tr:not(thead tr, tfoot tr):nth-child(2n):hover td),
:where(table tr:not(thead tr, tfoot tr):hover),
:where(table tr:not(thead tr, tfoot tr):nth-child(2n):hover) {
  background-color: light-dark(var(--gray-0), var(--gray-10));
}

:where(table > caption) {
  margin: var(--size-3);
}

:where(tfoot button) {
  padding-block: var(--size-1);
  padding-inline: var(--size-3);
}

:where(text) {
  white-space: pre;
}
